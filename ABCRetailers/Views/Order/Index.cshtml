<!-- Views/Order/Index.cshtml -->
@using ABCRetailers.Models
@model IEnumerable<ABCRetailers.Models.Order>
@{
    ViewData["Title"] = "Orders";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-shopping-cart"></i> Orders</h2>
    <a asp-action="Create" class="btn btn-primary">
        <i class="fas fa-plus"></i> Add Order
    </a>
</div>

@if (Model != null && Model.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Product</th>
                    <th>Order Date (Local)</th>
                    <th>Qty</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th class="text-end">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.OrderByDescending(o => o.OrderDateUtc))
                {
                    <tr>
                        <td><code>@(order.Id?.Length > 8 ? order.Id[..8] + "…" : order.Id)</code></td>
                        <td>@order.CustomerId</td>
                        <td>@(!string.IsNullOrWhiteSpace(order.ProductName) ? order.ProductName : order.ProductId)</td>
                        <td>@FormatLocal(order.OrderDateUtc)</td>
                        <td>@order.Quantity</td>
                        <td>@order.TotalAmount.ToString("C")</td>
                        <td><span class="badge bg-@Badge(order.Status)">@order.Status</span></td>
                        <td class="text-end">
                            <div class="btn-group" role="group">
                                <a asp-action="Details" asp-route-id="@order.Id" class="btn btn-sm btn-outline-info" title="Details">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a asp-action="Edit" asp-route-id="@order.Id" class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>

                                @if (order.Status is not OrderStatus.Completed and not OrderStatus.Cancelled)
                                {
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-warning dropdown-toggle" data-bs-toggle="dropdown" title="Update Status">
                                            <i class="fas fa-sync-alt"></i>
                                        </button>
                                        <ul class="dropdown-menu">
                                            @if (order.Status == OrderStatus.Submitted)
                                            {
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="updateOrderStatus('@order.Id','Processing')">
                                                        <i class="fas fa-cog text-info"></i> Mark as Processing
                                                    </a>
                                                </li>
                                            }
                                            @if (order.Status == OrderStatus.Processing)
                                            {
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="updateOrderStatus('@order.Id','Completed')">
                                                        <i class="fas fa-check text-success"></i> Mark as Completed
                                                    </a>
                                                </li>
                                            }
                                            <li>
                                                <a class="dropdown-item" href="#" onclick="updateOrderStatus('@order.Id','Cancelled')">
                                                    <i class="fas fa-times text-danger"></i> Cancel Order
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                }

                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="confirmDelete('@order.Id','@order.Id')" title="Delete">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> No orders found.
        <a asp-action="Create" class="alert-link">Create your first order</a>!
    </div>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete order <strong id="orderId"></strong>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@functions {
    string FormatLocal(DateTimeOffset? dto)
        => dto.HasValue ? dto.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm") : "-";

    string Badge(OrderStatus status) => status switch
    {
        OrderStatus.Submitted => "primary",
        OrderStatus.Processing => "info",
        OrderStatus.Completed => "success",
        OrderStatus.Cancelled => "danger",
        _ => "secondary"
    };
}

<!-- hidden antiforgery token for AJAX -->
<form id="__af" method="post" style="display:none">
    @Html.AntiForgeryToken()
</form>

@section Scripts {
    <script>
        function confirmDelete(orderIdFull, orderIdForDisplay) {
            const shortId = (orderIdForDisplay && orderIdForDisplay.length > 8) ? orderIdForDisplay.substring(0,8) + '…' : orderIdForDisplay;
            document.getElementById('orderId').textContent = shortId;
            document.getElementById('deleteForm').action = '@Url.Action("Delete", "Order")/' + encodeURIComponent(orderIdFull);
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }

        // post as x-www-form-urlencoded so MVC binds (id, newStatus)
        function updateOrderStatus(orderId, newStatus) {
            if (!confirm(`Are you sure you want to change the status to "${newStatus}"?`)) return;

            const token = document.querySelector('#__af input[name="__RequestVerificationToken"]').value;
            const body  = new URLSearchParams({ id: orderId, newStatus: newStatus, __RequestVerificationToken: token });

            fetch('@Url.Action("UpdateOrderStatus", "Order")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' },
                body
            })
            .then(r => r.json())
            .then(data => {
                if (data && data.success) location.reload();
                else alert('Error: ' + (data && data.message ? data.message : 'Unknown error'));
            })
            .catch(() => alert('An error occurred while updating the status'));
        }
    </script>
}

