<!-- Views/Order/Edit.cshtml -->
@using ABCRetailers.Models
@model ABCRetailers.Models.Order
@{
    ViewData["Title"] = "Edit Order";
}

<h2><i class="fas fa-edit"></i> Edit Order</h2>

<div class="row">
    <div class="col-md-8">
        <form asp-action="Edit" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="CustomerId" />
            <input type="hidden" asp-for="ProductId" />
            <input type="hidden" asp-for="OrderDateUtc" />

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label class="form-label">Customer</label>
                        <input type="text" class="form-control" value="@Model.CustomerId" readonly />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label class="form-label">Product</label>
                        <input type="text" class="form-control" value="@(!string.IsNullOrWhiteSpace(Model.ProductName) ? Model.ProductName : Model.ProductId)" readonly />
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Order date: read-only in LOCAL time, null-safe -->
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label class="form-label">Order Date (Local)</label>
                        <input class="form-control" value="@FormatLocal(Model.OrderDateUtc)" readonly />
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Quantity" class="form-label"></label>
                        <input asp-for="Quantity" class="form-control" type="number" min="1" readonly />
                        <div class="form-text">Quantity cannot be changed after order creation</div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label class="form-label">Unit Price</label>
                        <input type="text" class="form-control" value="@Model.UnitPrice.ToString("C")" readonly />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label class="form-label">Total</label>
                        <input type="text" class="form-control" value="@Model.TotalAmount.ToString("C")" readonly />
                    </div>
                </div>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Status" class="form-label"></label>
                @* Works if Order.Status is an enum *@
                <select asp-for="Status" class="form-select" asp-items="Html.GetEnumSelectList<OrderStatus>()"></select>
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Update Order
                </button>
                <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-info">
                    <i class="fas fa-eye"></i> View Details
                </a>
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="fas fa-times"></i> Cancel
                </a>
            </div>
        </form>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h6 class="card-title mb-0">Order Summary</h6>
            </div>
            <div class="card-body">
                <p>
                    <strong>Order ID:</strong><br />
                    <small class="text-muted"><code>@Model.Id</code></small>
                </p>

                <p>
                    <strong>Order Placed (Local):</strong><br />
                    <small class="text-muted">@FormatLocal(Model.OrderDateUtc)</small>
                </p>

                <p>
                    <strong>Current Status:</strong><br />
                    <span class="badge bg-@Badge(Model.Status)">@Model.Status</span>
                </p>
            </div>
        </div>
    </div>
</div>

@functions {
    string FormatLocal(DateTimeOffset? dto)
        => dto.HasValue ? dto.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm") : "-";

    string Badge(OrderStatus status) => status switch
    {
        OrderStatus.Submitted => "primary",
        OrderStatus.Processing => "info",
        OrderStatus.Completed => "success",
        OrderStatus.Cancelled => "danger",
        _ => "secondary"
    };
}

